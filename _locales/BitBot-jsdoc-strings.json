{
  "BBBuzz": "Values for buzzer. On or Off",
  "BBColors": "Pre-Defined LED colours",
  "BBLightSensor": "Enumeration of light sensors.",
  "BBLineSensor": "Enumeration of line sensors.",
  "BBMode": "Update mode for LEDs\r\nsetting to Manual requires show LED changes blocks\r\nsetting to Auto will update the LEDs everytime they change",
  "BBModel": "Model Types of BitBot\r\nClassic or XL",
  "BBMotor": "Enumeration of motors.",
  "BBPingUnit": "Ping unit for sensor.",
  "BBRobotDirection": "Enumeration of directions.",
  "BBStopMode": "Stop modes. Coast or Brake",
  "bitbot": "Custom blocks",
  "bitbot.BBColours": "Get numeric value of colour\r\n* @param color Standard RGB Led Colours",
  "bitbot.BBModels": "Get numeric value of BitBot Model\r\n* @param model BitBot Model eg: BBModel.Classic",
  "bitbot.buzz": "Sound a buzz.",
  "bitbot.buzz|param|flag": "state of buzzer (On or Off)",
  "bitbot.convertRGB": "Convert from RGB values to colour number\r\n* @param red Red value of the LED (0 to 255)",
  "bitbot.drive": "Drive robot forward (or backward) at speed.",
  "bitbot.driveMilliseconds": "Drive robot forward (or backward) at speed for milliseconds.",
  "bitbot.driveMilliseconds|param|milliseconds": "duration in milliseconds to drive forward for, then stop. eg: 400",
  "bitbot.driveMilliseconds|param|speed": "speed of motor between -1023 and 1023. eg: 600",
  "bitbot.driveTurn": "Turn robot in direction at speed.",
  "bitbot.driveTurnMilliseconds": "Spin robot in direction at speed for milliseconds.",
  "bitbot.driveTurnMilliseconds|param|direction": "direction to turn.",
  "bitbot.driveTurnMilliseconds|param|milliseconds": "duration in milliseconds to turn for, then stop. eg: 400",
  "bitbot.driveTurnMilliseconds|param|speed": "speed of motor between 0 and 1023. eg: 600",
  "bitbot.driveTurn|param|direction": "direction to turn.",
  "bitbot.driveTurn|param|speed": "speed of motor between 0 and 1023. eg: 600",
  "bitbot.drive|param|speed": "speed of motor between -1023 and 1023. eg: 600",
  "bitbot.getModel": "get Model of BitBot (Classic or XL)",
  "bitbot.motor": "Drive motor(s) forward or reverse.",
  "bitbot.motor|param|motor": "motor to drive.",
  "bitbot.motor|param|speed": "speed of motor (-1023 to 1023). eg: 600",
  "bitbot.neoBrightness": "Set the brightness of the LEDs",
  "bitbot.neoBrightness|param|brightness": "a measure of LED brightness in 0-255. eg: 40",
  "bitbot.neoClear": "Clear all leds.",
  "bitbot.neoRainbow": "Shows a rainbow pattern on all LEDs.",
  "bitbot.neoRotate": "Rotate LEDs forward.",
  "bitbot.neoSetColor": "Sets all LEDs to a given color (range 0-255 for r, g, b).",
  "bitbot.neoSetColor|param|rgb": "RGB color of the LED",
  "bitbot.neoSetPixelColor": "Set LED to a given color (range 0-255 for r, g, b).\r\n* @param ledId position of the LED (0 to 11)",
  "bitbot.neoSetPixelColor|param|rgb": "RGB color of the LED",
  "bitbot.neoShift": "Shift LEDs forward and clear with zeros.",
  "bitbot.neoShow": "Show LED changes",
  "bitbot.readLight": "Read light sensor.",
  "bitbot.readLight|param|sensor": "Light sensor to read.",
  "bitbot.readLine": "Read line sensor.",
  "bitbot.readLine|param|sensor": "Line sensor to read.",
  "bitbot.robot_stop": "Stop robot by coasting slowly to a halt or braking",
  "bitbot.robot_stop|param|mode": "Brakes on or off",
  "bitbot.select_model": "Force Model of BitBot (Determines Pins used)\r\n* @param model Model of BitBot; Classic or XL",
  "bitbot.setTalon": "Adjust opening of Talon attachment",
  "bitbot.setTalon|param|degrees": "Degrees to open Talon (0 to 80). eg: 30",
  "bitbot.setUpdateMode": "Set LED update mode (Manual or Automatic)",
  "bitbot.setUpdateMode|param|updateMode": "setting automatic will show LED changes automatically",
  "bitbot.sonar": "Read distance from sonar module connected to accessory connector.",
  "bitbot.sonar|param|unit": "desired conversion unit",
  "bluetooth": "Support for additional Bluetooth services.\n\nSupport for additional Bluetooth services.",
  "bluetooth.advertiseUid": "Advertise an Eddystone UID",
  "bluetooth.advertiseUidBuffer": "Advertise an Eddystone UID",
  "bluetooth.advertiseUidBuffer|param|connectable": "true to keep bluetooth connectable for other services, false otherwise.",
  "bluetooth.advertiseUidBuffer|param|nsAndInstance": "16 bytes buffer of namespace (bytes 0-9) and instance (bytes 10-15)",
  "bluetooth.advertiseUidBuffer|param|power": "power level between 0 and 7, eg: 7",
  "bluetooth.advertiseUid|param|connectable": "true to keep bluetooth connectable for other services, false otherwise.",
  "bluetooth.advertiseUid|param|instance": "4 last bytes of the instance uid",
  "bluetooth.advertiseUid|param|ns": "4 last bytes of the namespace uid",
  "bluetooth.advertiseUid|param|power": "power level between 0 and 7, eg: 7",
  "bluetooth.advertiseUrl": "Advertise an Eddystone URL",
  "bluetooth.advertiseUrl|param|connectable": "true to keep bluetooth connectable for other services, false otherwise.",
  "bluetooth.advertiseUrl|param|power": "power level between 0 and 7, eg: 7",
  "bluetooth.advertiseUrl|param|url": "the url to transmit. Must be no longer than the supported eddystone url length, eg: \"https://makecode.com\"",
  "bluetooth.onBluetoothConnected": "Register code to run when the micro:bit is connected to over Bluetooth",
  "bluetooth.onBluetoothConnected|param|body": "Code to run when a Bluetooth connection is established",
  "bluetooth.onBluetoothDisconnected": "Register code to run when a bluetooth connection to the micro:bit is lost",
  "bluetooth.onBluetoothDisconnected|param|body": "Code to run when a Bluetooth connection is lost",
  "bluetooth.onUartDataReceived": "Registers an event to be fired when one of the delimiter is matched.",
  "bluetooth.onUartDataReceived|param|delimiters": "the characters to match received characters against.",
  "bluetooth.setTransmitPower": "Sets the bluetooth transmit power between 0 (minimal) and 7 (maximum).",
  "bluetooth.setTransmitPower|param|power": "power level between 0 (minimal) and 7 (maximum), eg: 7.",
  "bluetooth.startAccelerometerService": "Starts the Bluetooth accelerometer service",
  "bluetooth.startButtonService": "Starts the Bluetooth button service",
  "bluetooth.startIOPinService": "Starts the Bluetooth IO pin service.",
  "bluetooth.startLEDService": "Starts the Bluetooth LED service",
  "bluetooth.startMagnetometerService": "Starts the Bluetooth magnetometer service",
  "bluetooth.startTemperatureService": "Starts the Bluetooth temperature service",
  "bluetooth.startUartService": "Starts the Bluetooth UART service",
  "bluetooth.stopAdvertising": "Stops advertising Eddystone end points",
  "bluetooth.uartReadBuffer": "Reads buffered UART data into a buffer",
  "bluetooth.uartReadUntil": "Reads from the Bluetooth UART service buffer, returning its contents when the specified delimiter character is encountered.",
  "bluetooth.uartWriteBuffer": "Sends a buffer of data via Bluetooth UART",
  "bluetooth.uartWriteLine": "Writes to the Bluetooth UART service buffer. From there the data is transmitted over Bluetooth to a connected device.",
  "bluetooth.uartWriteNumber": "Prints a numeric value to the serial",
  "bluetooth.uartWriteString": "Writes to the Bluetooth UART service buffer. From there the data is transmitted over Bluetooth to a connected device.",
  "bluetooth.uartWriteValue": "Writes a ``name: value`` pair line to the serial.",
  "bluetooth.uartWriteValue|param|name": "name of the value stream, eg: x",
  "bluetooth.uartWriteValue|param|value": "to write"
}